
/* all the css variables to control common document constants */
:root {
    --bg_header: #444;
    --tc_header: #EEE;
    --bg_section: white;
    --bg_altsection: rgba(127,127,127,0.1);
    --color_border: lightgray;
    --color_divider: gainsboro;
    --bg_activeselect: teal;
    --tc_activeselect: white;
    --tc_aside: gray;
    --tc_error: darkred;
    --bg_error: rgba(255,0,0,0.05);
    --tc_success: green;
    --tc_flatlink: teal;
    --tc_link: rgb(55, 91, 189);
    --font: sans-serif;
    --simple_hover: brightness(1.2);

    /* Syntax highlighting in code sections! You don't have to change these if you don't 
       want, they're not used anywhere */
    --code_keyword: #07bac6;
    --code_number: #f442ad;
    --code_comment: #39c655;
    --code_string: #967de0;
    --code_label: #fff496;
    --code_function: #63b3ff;
    --code_fg: #DDD;
    --code_bg: #222;
}

/* ----------------------------- *
 *     BASIC / GENERIC STUFF     *
 * ----------------------------- */

.error {
    color: var(--tc_error);
}

.errorlist .error {
    margin-bottom: 0.5em;
    padding: 0.2em 0.4em;
    border-radius: 0.2em;
    background-color: var(--bg_error);
}

.success {
    color: var(--tc_success);
}

.plainlink {
    text-decoration: none;
    cursor: pointer;
}

.controlbar {
    overflow: hidden;
    display: flex;
    align-items: center;
    box-sizing: border-box;
    padding: 0.25em;
    width: 100%;
}

.smallseparate > * {
    margin-right: 0.5em;
}

.mediumseparate > * {
    margin-right: 0.8em;
}

.aside {
    font-size: 0.8em;
    color: var(--tc_aside);
}

.largeinput {
    width: 30em;
    max-width: 100%;
    box-sizing: border-box;
}

.smallinput {
    width: 2.5em;
}

.spoilertext {
    background: var(--bg_header);
    color: var(--bg_header);
    border-radius: 0.2em;
}

.imagebrowser {
    width: 100%;
    height: 40em;
    max-height: 80vh;
    box-sizing: border-box;
    border: none;
    /*border: 1px solid var(--color_divider);*/
}

.scrollable {
    overflow-y: auto;
    overflow-x: hidden;
}

a.coolbutton {
    padding: 0.2em;
    background: var(--bg_activeselect);
    border-radius: 0.3em;
    text-decoration: none;
    cursor: pointer;
}

/* UGH LINKS */
a.coolbutton:link, a.coolbutton:visited { color: var(--tc_header);
}

/* These properties themselves are fine, but consider what should get them. */
.hover { transition: filter 0.2s ease, background-color 0.2s ease; }
.hover:hover { filter: var(--simple_hover); }

/* Not so sure about this... */
a:link, a:visited {  
    color: var(--tc_link);
}

a.flatlink:link, a.flatlink:visited {
    text-decoration: none;
    color: var(--tc_flatlink);
}

label.inline {
    display: flex;
    align-items: center;
    max-width: 100%;
}

label.inline > input, label.inline > select {
    /* Give space between input and label... assuming that's how it's set up */
    margin: 0 0.75em;
}

/* Make checkboxes consistent on all pages */
input[type="checkbox"] {
    width: 1.1em;
    height: 1.1em;
    box-sizing: border-box;
}

/* Oh also, all readonly inputs should be the same! */
/*input[readonly] {
    filter: opacity(0.75);
}*/

input[type="file"] {
    border: 1px solid var(--color_border);
}

/* Also, dividers are like decorators, want them generic too */
hr {
    border: none;
    border-top: 1px solid var(--color_divider);
    margin: 1.5em 0;
}

hr.smaller {
    margin-top: 1.0em; /* Split so left/right are left alone */
    margin-bottom: 1.0em; 
}


/* Some important stuff, like content rendering */
.content {
    line-height: 1.4;
    white-space: pre-wrap;
    word-wrap: break-word;
}

.content img {
    max-width: 100%;
    max-height: 50vh;
    margin: 0.7em 0;
}

.content ul, .content ol {
    padding-left: 1.2em;
}

.content blockquote {
    background: var(--bg_altsection);
    padding: 1em 1.2em;
    padding-left: 1.2em;
    margin: 0em;
    border-radius: 0.7em;
    box-sizing: border-box;

    /* A hack for now */
    max-width: 75vw; 
}

.content blockquote[cite]::before {
    content: attr(cite) ":\A";
    font-style: italic;
    display: block;
    margin-bottom: 0.5em;
    margin-left: -0.2em;
}

.content .spoiler {
    padding: 0.3em 0.4em;
    margin: 0.3em 0;
    border-radius: 0.3em;
    border: 1px solid var(--color_divider);
}

.content .icode {
    font-family: monospace;
    color: var(--tc_error);
    font-weight: bold;
}

.content .code {
    background: var(--bg_header);
    color: var(--tc_header);
    padding: 0.6em 0.8em;
    border-radius: 0.4em;
    box-sizing: border-box;
    overflow-x: auto;

    /* A hack for now */
    max-width: 75vw; 
}

/* Syntax highlighting for code! */
.content .code .keyword { color: var(--code_keyword); }
.content .code .number { color: var(--code_number); }
.content .code .comment { color: var(--code_comment); }
.content .code .string { color: var(--code_string); }
.content .code .label { color: var(--code_label); }
.content .code .function { color: var(--code_function); } 
.content .code { color: var(--code_fg); background-color: var(--code_bg); }

/* .content .code .keyword, .content inline-code .keyword { color: #07bac6; }
.content .code .number, .content inline-code .number { color: #f442ad; }
.content .code .comment, .content inline-code .comment { color: #39c655; }
.content .code .string, .content inline-code .string { color: #967de0; }
.content .code .label, .content inline-code .label { color: #fff496; }
.content .code .function, .content inline-code .function { color: #63b3ff; } 
.content .code .operator, .content inline-code .operator { color: ; } 
.content .code .variable, .content inline-code .variable { color: ; } 
.content .code .separator, .content inline-code .separator{ color: ; } 
*/